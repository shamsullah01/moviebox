name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  # Test and Build
  test:
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        node-version: [16.x, 18.x, 20.x]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Run linting
      run: npm run lint --if-present
      
    - name: Run tests
      run: npm test -- --coverage --watchAll=false
      
    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
        
    - name: Build application
      run: npm run build
      
    - name: Test build
      run: |
        npm install -g serve
        serve -s build -p 3000 &
        sleep 5
        curl --fail http://localhost:3000 || exit 1

  # Security scan
  security:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18.x'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Run security audit
      run: npm audit
      
    - name: Run Snyk security scan
      uses: snyk/actions/node@master
      env:
        SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}

  # Deploy to staging
  deploy-staging:
    needs: [test, security]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/develop'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18.x'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Build for staging
      run: npm run build
      env:
        REACT_APP_ENV: staging
        REACT_APP_MOVIEBOX_API: ${{ secrets.STAGING_MOVIEBOX_API }}
        REACT_APP_MOVIEBOX_WEB: ${{ secrets.STAGING_MOVIEBOX_WEB }}
        
    - name: Deploy to Netlify (Staging)
      uses: netlify/actions/cli@master
      with:
        args: deploy --dir=build --site=${{ secrets.NETLIFY_STAGING_SITE_ID }}
      env:
        NETLIFY_AUTH_TOKEN: ${{ secrets.NETLIFY_AUTH_TOKEN }}

  # Deploy to production
  deploy-production:
    needs: [test, security]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18.x'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Build for production
      run: npm run build
      env:
        REACT_APP_ENV: production
        REACT_APP_MOVIEBOX_API: ${{ secrets.PROD_MOVIEBOX_API }}
        REACT_APP_MOVIEBOX_WEB: ${{ secrets.PROD_MOVIEBOX_WEB }}
        REACT_APP_TMDB_API_KEY: ${{ secrets.TMDB_API_KEY }}
        
    - name: Deploy to Netlify (Production)
      uses: netlify/actions/cli@master
      with:
        args: deploy --prod --dir=build --site=${{ secrets.NETLIFY_PROD_SITE_ID }}
      env:
        NETLIFY_AUTH_TOKEN: ${{ secrets.NETLIFY_AUTH_TOKEN }}
        
    - name: Create Release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: v${{ github.run_number }}
        release_name: Release v${{ github.run_number }}
        body: |
          ## ðŸš€ What's New
          
          This release includes:
          - Latest features and improvements
          - Bug fixes and performance optimizations
          - Enhanced MovieBox.ng integration
          
          ## ðŸ“‹ Changes
          
          See [CHANGELOG.md](CHANGELOG.md) for detailed changes.
          
          ## ðŸ”— Links
          
          - [Live Demo](https://your-production-url.com)
          - [Documentation](README.md)
          - [Issues](https://github.com/${{ github.repository }}/issues)
        draft: false
        prerelease: false

  # Performance testing
  lighthouse:
    needs: [deploy-staging]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/develop'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Wait for deployment
      run: sleep 60
      
    - name: Run Lighthouse CI
      uses: treosh/lighthouse-ci-action@v9
      with:
        urls: |
          ${{ secrets.STAGING_URL }}
        uploadArtifacts: true
        temporaryPublicStorage: true
